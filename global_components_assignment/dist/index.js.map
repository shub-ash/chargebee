{"version":3,"sources":["../src/button/index.tsx","../src/badge/index.tsx","../src/checkBox/index.tsx","../src/input/index.tsx","../src/notification/index.tsx"],"names":["React","Button","children","className","variant","onClick","leftIcon","rightIcon","disabled","onFocus","onBlur","onKeyDown","onMouseEnter","onMouseLeave","Badge","text","color","Checkbox","name","value","onChange","checked","label","Input","type","min","max","maxlength","minlength","placeholder","onKeyPress","useState","useEffect","Notification","message","onClose","delay","icon","visible","setVisible","timer","handleClose"],"mappings":"AAAA,OAAOA,MAAW,QAyCX,IAAMC,EAAS,CAAC,CACrB,SAAAC,EACA,UAAAC,EACA,QAAAC,EACA,QAAAC,EACA,SAAAC,EACA,UAAAC,EACA,SAAAC,EACA,QAAAC,EACA,OAAAC,EACA,UAAAC,EACA,aAAAC,EACA,aAAAC,CACF,IAYIb,EAAA,cAAC,UACC,UAAW,WAZAI,GAAiB,CAC9B,OAAQA,EAAS,CACf,IAAK,UACH,MAAO,UACT,IAAK,YACH,MAAO,YACT,QACE,MAAO,EACX,CACF,GAG+BA,CAAO,CAAC,IAAID,CAAS,IAC9CK,EAAW,WAAa,EAC1B,GACA,QAASH,EACT,SAAUG,EACV,KAAK,SACL,QAASC,EACT,OAAQC,EACR,UAAWC,EACX,aAAcC,EACd,aAAcC,GAEbP,GAAYN,EAAA,cAAC,QAAK,UAAU,QAAQM,CAAS,EAC7CJ,EACAK,GAAaP,EAAA,cAAC,QAAK,UAAU,QAAQO,CAAU,CAClD,EClFJ,OAAOP,MAAW,QA4BX,IAAMc,EAAQ,CAAC,CACpB,KAAAC,EACA,MAAAC,EACA,UAAAb,EACA,QAAAE,EACA,aAAAO,EACA,aAAAC,CACF,IAeIb,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC,QACC,UAAW,GAhBI,SACnBgB,IAAU,UACN,gBACAA,IAAU,YACV,kBACAA,IAAU,UACV,gBACAA,IAAU,SACV,eACAA,IAAU,UACV,gBACA,EACN,EAIgC,IAAIb,CAAS,GACvC,QAASE,EACT,aAAcO,EACd,aAAcC,GAEbE,CACH,CACF,EC3DJ,OAAOf,MAAW,QAkCX,IAAMiB,EAAW,CAAC,CACvB,KAAAC,EACA,MAAAC,EACA,SAAAC,EACA,SAAAZ,EACA,UAAAL,EACA,QAAAkB,EACA,MAAAC,EACA,aAAAV,EACA,aAAAC,CACF,IAEIb,EAAA,cAAC,OAAI,UAAW,sBAAsBG,CAAS,IAC7CH,EAAA,cAAC,SACC,UAAU,iBACV,KAAK,WACL,KAAMkB,EACN,MAAOC,GAAS,GAChB,SAAUC,EACV,SAAUZ,EACV,QAASa,EACT,aAAcT,EACd,aAAcC,EAChB,EACAb,EAAA,cAAC,OAAI,UAAU,kBAAkBsB,CAAM,CACzC,EC3DJ,OAAOtB,MAAW,QA8CX,IAAMuB,EAAQ,CAAC,CACpB,KAAAC,EAAO,OACP,IAAAC,EACA,IAAAC,EACA,UAAAC,EACA,UAAAC,EACA,YAAAC,EACA,KAAAX,EACA,MAAAC,EACA,SAAAC,EACA,SAAAZ,EACA,UAAAL,EACA,QAAAM,EACA,OAAAC,EACA,UAAAC,EACA,WAAAmB,CACF,IAEI9B,EAAA,cAAC,SACC,UAAW,SAASG,CAAS,GAC7B,KAAMqB,EACN,IAAKC,EACL,IAAKC,EACL,UAAWC,EACX,UAAWC,EACX,YAAaC,EACb,KAAMX,EACN,MAAOC,GAAS,GAChB,SAAUC,EACV,SAAUZ,EACV,QAASC,EACT,OAAQC,EACR,UAAWC,EACX,WAAYmB,EACd,EChFJ,OAAO9B,GAAS,YAAA+B,EAAU,aAAAC,MAAiB,QA8BpC,IAAMC,EAAe,CAAC,CAC3B,QAAAC,EACA,QAAAC,EACA,UAAAhC,EAAY,GACZ,aAAAS,EACA,aAAAC,EACA,MAAAuB,EAAQ,IACR,KAAAC,CACF,IAAyB,CACvB,GAAM,CAACC,EAASC,CAAU,EAAIR,EAAS,EAAI,EAE3CC,EAAU,IAAM,CACd,GAAII,GAASD,EAAS,CACpB,IAAMK,EAAQ,WAAW,IAAM,CAC7BC,EAAY,CACd,EAAGL,CAAK,EACR,MAAO,IAAM,aAAaI,CAAK,CACjC,CACF,EAAG,CAACJ,EAAOD,CAAO,CAAC,EAEnB,IAAMM,EAAc,IAAM,CACxBF,EAAW,EAAK,EACZJ,GAASA,EAAQ,CACvB,EAEA,OAAOG,EACLtC,EAAA,cAAC,OACC,UAAW,gBAAgBG,CAAS,GACpC,aAAcS,EACd,aAAcC,GAEdb,EAAA,cAAC,YAAMkC,CAAQ,EACflC,EAAA,cAAC,QAAK,UAAU,aAAa,QAASyC,GACnCJ,GAAc,GACjB,CACF,EACE,IACN","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * Props for the Button component\r\n * @typedef {Object} ButtonProps\r\n * @property {string | JSX.Element} children - The content of the button.\r\n * @property {\"primary\" | \"secondary\"} [variant] - The variant of the button (optional).\r\n * @property {string} [className] - Additional CSS class names for styling (optional).\r\n * @property {(e: any) => void} [onClick] - The click event handler (optional).\r\n * @property {JSX.Element} [leftIcon] - The left icon element (optional).\r\n * @property {JSX.Element} [rightIcon] - The right icon element (optional).\r\n * @property {boolean} [disabled] - Specifies whether the button is disabled (optional).\r\n * @property {() => void} [onFocus] - The focus event handler (optional).\r\n * @property {() => void} [onBlur] - The blur event handler (optional).\r\n * @property {() => void} [onKeyDown] - The keydown event handler (optional).\r\n * @property {() => void} [onMouseEnter] - The mouse enter event handler (optional).\r\n * @property {() => void} [onMouseLeave] - The mouse leave event handler (optional).\r\n */\r\n\r\n/**\r\n * Button component\r\n * @param {ButtonProps} props - The props for the Button component.\r\n * @returns {JSX.Element} Button component JSX\r\n */\r\n\r\nexport type ButtonProps = {\r\n  children: string | JSX.Element;\r\n  variant?: \"primary\" | \"secondary\";\r\n  className?: string;\r\n  onClick?: (e: any) => void;\r\n  leftIcon?: JSX.Element;\r\n  rightIcon?: JSX.Element;\r\n  disabled?: boolean | undefined;\r\n  onFocus?: () => void;\r\n  onBlur?: () => void;\r\n  onKeyDown?: () => void;\r\n  onMouseEnter?: () => void;\r\n  onMouseLeave?: () => void;\r\n};\r\n\r\nexport const Button = ({\r\n  children,\r\n  className,\r\n  variant,\r\n  onClick,\r\n  leftIcon,\r\n  rightIcon,\r\n  disabled,\r\n  onFocus,\r\n  onBlur,\r\n  onKeyDown,\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n}: ButtonProps) => {\r\n  const color = (variant: any) => {\r\n    switch (variant) {\r\n      case \"primary\":\r\n        return \"primary\";\r\n      case \"secondary\":\r\n        return \"secondary\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n  return (\r\n    <button\r\n      className={`button ${color(variant)} ${className} ${\r\n        disabled ? \"disabled\" : \"\"\r\n      }`}\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      type=\"button\"\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onKeyDown={onKeyDown}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n    >\r\n      {leftIcon && <span className=\"icon\">{leftIcon}</span>}\r\n      {children}\r\n      {rightIcon && <span className=\"icon\">{rightIcon}</span>}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * @typedef {Object} BadgeType - Props for the Badge component.\r\n * @property {string} [text] - The text content of the badge (optional).\r\n * @property {string} [color] - The color of the badge (optional).\r\n * @property {string} [className] - Additional CSS class names for styling (optional).\r\n * @property {() => void} [onClick] - The click event handler for the badge (optional).\r\n * @property {() => void} [onMouseEnter] - The mouse enter event handler for the badge (optional).\r\n * @property {() => void} [onMouseLeave] - The mouse leave event handler for the badge (optional).\r\n */\r\n\r\n/**\r\n * Badge component\r\n * @param {BadgeType} props - The props for the Badge component.\r\n * @returns {JSX.Element} Badge component JSX\r\n */\r\n\r\nexport type BadgeType = {\r\n  text?: string;\r\n  color?: \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\";\r\n  className?: string;\r\n  onClick?: () => void;\r\n  onMouseEnter?: () => void;\r\n  onMouseLeave?: () => void;\r\n};\r\n\r\nexport const Badge = ({\r\n  text,\r\n  color,\r\n  className,\r\n  onClick,\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n}: BadgeType) => {\r\n  const badgeClasses = `badge ${\r\n    color === \"primary\"\r\n      ? \"badge-primary\"\r\n      : color === \"secondary\"\r\n      ? \"badge-secondary\"\r\n      : color === \"success\"\r\n      ? \"badge-success\"\r\n      : color === \"danger\"\r\n      ? \"badge-danger\"\r\n      : color === \"warning\"\r\n      ? \"badge-warning\"\r\n      : \"\"\r\n  }`;\r\n  return (\r\n    <>\r\n      <span\r\n        className={`${badgeClasses} ${className}`}\r\n        onClick={onClick}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n      >\r\n        {text}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * @typedef {Object} CheckboxProps - Props for the Checkbox component.\r\n * @property {string} name - The name of the checkbox input.\r\n * @property {string} [value] - The value of the checkbox input (optional).\r\n * @property {(event: React.ChangeEvent<HTMLInputElement>) => void} [onChange] - The change event handler for the checkbox input (optional).\r\n * @property {boolean} [disabled] - Specifies whether the checkbox is disabled (optional).\r\n * @property {string} [className] - Additional CSS class names for styling (optional).\r\n * @property {boolean} [checked] - Specifies whether the checkbox is checked (optional).\r\n * @property {string} label - The label text for the checkbox.\r\n * @property {() => void} [onMouseEnter] - The mouse enter event handler (optional).\r\n * @property {() => void} [onMouseLeave] - The mouse leave event handler (optional).\r\n */\r\n\r\n/**\r\n * Checkbox component\r\n * @param {CheckboxProps} props - The props for the Checkbox component.\r\n * @returns {JSX.Element} Checkbox component JSX\r\n */\r\n\r\ntype CheckboxProps = {\r\n  name: string;\r\n  value?: string;\r\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  checked?: boolean;\r\n  label: string;\r\n  onMouseEnter?: () => void;\r\n  onMouseLeave?: () => void;\r\n};\r\n\r\nexport const Checkbox = ({\r\n  name,\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  className,\r\n  checked,\r\n  label,\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n}: CheckboxProps) => {\r\n  return (\r\n    <div className={`checkbox-container ${className}`}>\r\n      <input\r\n        className=\"checkbox-input\"\r\n        type=\"checkbox\"\r\n        name={name}\r\n        value={value || \"\"}\r\n        onChange={onChange}\r\n        disabled={disabled}\r\n        checked={checked}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n      />\r\n      <div className=\"checkbox-label\">{label}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * @typedef {Object} InputProps - Props for the Input component.\r\n * @property {string} [type=\"text\"] - The type of the input element (optional, default is \"text\").\r\n * @property {number} [maxlength] - The maximum number of characters allowed in the input (optional).\r\n * @property {number} [minlength] - The minimum number of characters required in the input (optional).\r\n * @property {string} [placeholder] - The placeholder text for the input (optional).\r\n * @property {string} [name] - The name of the input element (optional).\r\n * @property {string} [value] - The value of the input element (optional).\r\n * @property {(event: React.ChangeEvent<HTMLInputElement>) => void} [onChange] - The change event handler for the input (optional).\r\n * @property {boolean} [disabled] - Specifies whether the input element is disabled (optional).\r\n * @property {string} [className] - Additional CSS class names for styling (optional).\r\n * @property {string} [min] - The minimum value allowed for numeric inputs (optional).\r\n * @property {string} [max] - The maximum value allowed for numeric inputs (optional).\r\n * @property {() => void} [onFocus] - The focus event handler for the input (optional).\r\n * @property {() => void} [onBlur] - The blur event handler for the input (optional).\r\n * @property {() => void} [onKeyDown] - The keydown event handler for the input (optional).\r\n * @property {() => void} [onKeyPress] - The keypress event handler for the input (optional).\r\n */\r\n\r\n/**\r\n * Input component\r\n * @param {InputProps} props - The props for the Input component.\r\n * @returns {JSX.Element} Input component JSX\r\n */\r\n\r\ntype InputProps = {\r\n  type?: string;\r\n  maxlength?: number;\r\n  minlength?: number;\r\n  placeholder?: string;\r\n  name?: string;\r\n  value?: string;\r\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  disabled?: boolean;\r\n  className?: string;\r\n  min?: string;\r\n  max?: string;\r\n  onFocus?: () => void;\r\n  onBlur?: () => void;\r\n  onKeyDown?: () => void;\r\n  onKeyPress?: () => void;\r\n};\r\n\r\nexport const Input = ({\r\n  type = \"text\",\r\n  min,\r\n  max,\r\n  maxlength,\r\n  minlength,\r\n  placeholder,\r\n  name,\r\n  value,\r\n  onChange,\r\n  disabled,\r\n  className,\r\n  onFocus,\r\n  onBlur,\r\n  onKeyDown,\r\n  onKeyPress,\r\n}: InputProps) => {\r\n  return (\r\n    <input\r\n      className={`input ${className}`}\r\n      type={type}\r\n      min={min}\r\n      max={max}\r\n      maxLength={maxlength}\r\n      minLength={minlength}\r\n      placeholder={placeholder}\r\n      name={name}\r\n      value={value || \"\"}\r\n      onChange={onChange}\r\n      disabled={disabled}\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onKeyDown={onKeyDown}\r\n      onKeyPress={onKeyPress}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * @typedef {Object} NotificationProps - Props for the Notification component.\r\n * @property {string} message - The notification message.\r\n * @property {() => void} [onClose] - The function to call when the notification is closed (optional).\r\n * @property {string} [className] - Additional CSS class names for styling (optional).\r\n * @property {() => void} [onMouseEnter] - The mouse enter event handler for the notification (optional).\r\n * @property {() => void} [onMouseLeave] - The mouse leave event handler for the notification (optional).\r\n * @property {number} [delay] - The delay in milliseconds before the notification disappears (optional).\r\n * @property {JSX.Element} [icon] - The icon element to display in the notification (optional).\r\n */\r\n\r\n/**\r\n * Notification component\r\n * @param {NotificationProps} props - The props for the Notification component.\r\n * @returns {JSX.Element} Notification component JSX\r\n */\r\n\r\nexport type NotificationProps = {\r\n  message: string;\r\n  onClose?: () => void;\r\n  className?: string;\r\n  onMouseEnter?: () => void;\r\n  onMouseLeave?: () => void;\r\n  delay?: number;\r\n  icon?: JSX.Element;\r\n};\r\n\r\nexport const Notification = ({\r\n  message,\r\n  onClose,\r\n  className = \"\",\r\n  onMouseEnter,\r\n  onMouseLeave,\r\n  delay = 3000,\r\n  icon,\r\n}: NotificationProps) => {\r\n  const [visible, setVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (delay || onClose) {\r\n      const timer = setTimeout(() => {\r\n        handleClose();\r\n      }, delay);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [delay, onClose]);\r\n\r\n  const handleClose = () => {\r\n    setVisible(false);\r\n    if (onClose) onClose();\r\n  };\r\n\r\n  return visible ? (\r\n    <div\r\n      className={`notification ${className}`}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n    >\r\n      <span>{message}</span>\r\n      <span className=\"close-icon\" onClick={handleClose}>\r\n        {icon ? icon : \"X\"}\r\n      </span>\r\n    </div>\r\n  ) : null;\r\n};\r\n"]}